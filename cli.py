import argparse
import json
import sys
from pathlib import Path
import pyperclip
from context_generator import create_llm_context

def progress_callback(message):
    """–ü—Ä–æ—Å—Ç–æ–π –∫–æ–ª–±—ç–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –∫–æ–Ω—Å–æ–ª—å."""
    print(message, file=sys.stderr)

def main():
    parser = argparse.ArgumentParser(
        description="–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è LLM –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument(
        "repo_path",
        help="–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞."
    )
    parser.add_argument(
        "-c", "--config",
        default="config.json",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ JSON. (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: config.json)"
    )
    parser.add_argument(
        "--output",
        "-o",
        help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –∏ –Ω–∞–ø–µ—á–∞—Ç–∞–Ω –≤ stdout."
    )
    parser.add_argument(
        "--no-clipboard",
        action="store_true",
        help="–ù–µ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞."
    )
    parser.add_argument(
        '--include-ext', nargs='*', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).'
    )
    parser.add_argument(
        '--include-files', nargs='*', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏.'
    )
    parser.add_argument(
        '--exclude-folders', nargs='*', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–∞–ø–∫–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.'
    )
    parser.add_argument(
        '--exclude-files', nargs='*', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏.'
    )
    parser.add_argument(
        '--exclude-ext', nargs='*', help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.'
    )
    parser.add_argument(
        '--no-tree', action='store_false', dest='include_tree', help='–ù–µ –≤–∫–ª—é—á–∞—Ç—å –¥–µ—Ä–µ–≤–æ –ø—Ä–æ–µ–∫—Ç–∞.'
    )
    parser.add_argument(
        '--max-chars', type=int, help='–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤ –Ω–∞ —Ñ–∞–π–ª.'
    )

    args = parser.parse_args()

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    config = {
        "include_ext": [],
        "include_files": [],
        "exclude_folders": [],
        "exclude_files": [],
        "exclude_ext": [],
        "include_tree": True,
        "max_chars_per_file": 100000
    }

    config_path = Path(args.config)
    if config_path.is_file():
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config.update(json.load(f))
            progress_callback(f"‚ÑπÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {config_path}")
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ {config_path}: {e}", file=sys.stderr)
            sys.exit(1)
    elif args.config != "config.json":
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—É—Ç—å –∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
        print(f"‚ö†Ô∏è  –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {args.config}", file=sys.stderr)


    # --- –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ ---
    if args.include_ext is not None: config['include_ext'] = args.include_ext
    if args.include_files is not None: config['include_files'] = args.include_files
    if args.exclude_folders is not None: config['exclude_folders'] = args.exclude_folders
    if args.exclude_files is not None: config['exclude_files'] = args.exclude_files
    if args.exclude_ext is not None: config['exclude_ext'] = args.exclude_ext
    if args.max_chars is not None: config['max_chars_per_file'] = args.max_chars
    # –î–µ–π—Å—Ç–≤–∏–µ 'store_false' –¥–ª—è no-tree —Å–∞–º–æ –æ–±–Ω–æ–≤–∏—Ç args.include_tree
    config['include_tree'] = args.include_tree


    try:
        progress_callback("üöÄ –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä–∫—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞...")
        result = create_llm_context(
            repo_path_str=args.repo_path,
            include_ext=config['include_ext'],
            include_files=config['include_files'],
            exclude_folders=config['exclude_folders'],
            exclude_files=config['exclude_files'],
            exclude_ext=config['exclude_ext'],
            include_tree=config['include_tree'],
            max_chars_per_file=config['max_chars_per_file'],
            progress_callback=progress_callback
        )

        if args.output:
            output_path = Path(args.output)
            output_path.parent.mkdir(parents=True, exist_ok=True)
            with open(output_path, 'w', encoding='utf-8') as f:
                f.write(result)
            progress_callback(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_path}")
        else:
            print(result)

        if not args.no_clipboard and not args.output:
            pyperclip.copy(result)
            progress_callback("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")

        progress_callback("üéâ –ì–æ—Ç–æ–≤–æ!")

    except FileNotFoundError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", file=sys.stderr)
        sys.exit(1)

if __name__ == "__main__":
    main()
